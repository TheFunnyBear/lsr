import org.jsoup.Jsoup
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.Locale

fun main() {
    val url = "https://www.lsr.ru/spb/zhilye-kompleksy/tsvetnoy-gorod-pejzazhnyj-kvartal/"
    val buildings = mutableMapOf<String, Int>()
    val currentDate = LocalDate.now().format(DateTimeFormatter.ISO_DATE)

    try {
        val doc = Jsoup.connect(url)
            .userAgent("Mozilla/5.0")
            .get()

        val buildingCards = doc.select("div.buildingCard")

        val buildingRegex = Regex("""–¥–æ–º\s*([\d–ê-–Ø–∞-—èA-Za-z]+)""", RegexOption.IGNORE_CASE)

        for (card in buildingCards) {
            val nameElement = card.selectFirst("p.label.l1.bold")
            val rawName = nameElement?.text()?.trim() ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            val matchResult = buildingRegex.find(rawName)
            val buildingNum = matchResult?.groupValues?.get(1) ?: rawName

            val countElement = card.selectFirst("span.buildingCard__count")
            val flatsCount = countElement?.text()?.trim()?.toIntOrNull() ?: 0

            buildings[buildingNum] = buildings.getOrDefault(buildingNum, 0) + flatsCount
        }

        val sortedBuildings = buildings.toList()
            .sortedWith(compareBy({ sortKey(it.first).first }, { sortKey(it.first).second }))

        println("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–æ–¥–∞–∂–µ –ø–æ –∫–æ—Ä–ø—É—Å–∞–º –Ω–∞ $currentDate\n")
        for ((building, totalFlats) in sortedBuildings) {
            println("–ö–æ—Ä–ø—É—Å: $building, –ö–≤–∞—Ä—Ç–∏—Ä –≤ –ø—Ä–æ–¥–∞–∂–µ: $totalFlats")
        }

        saveToDatabase(currentDate, sortedBuildings)
        printStatsFromDatabase()
        // printStatsByDate("2025-06-05") // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É

    } catch (e: Exception) {
        println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${e.message}")
    }
}

fun sortKey(building: String): Pair<Int, String> {
    val regex = Regex("""(\d+)([^\d]*)""")
    val match = regex.find(building)
    return if (match != null) {
        val numPart = match.groupValues[1].toInt()
        val letterPart = match.groupValues[2].uppercase(Locale.getDefault())
        numPart to letterPart
    } else {
        9999 to ""
    }
}

fun saveToDatabase(date: String, data: List<Pair<String, Int>>) {
    Class.forName("org.sqlite.JDBC")
    val dbUrl = "jdbc:sqlite:buildings.db"
    val connection: Connection = DriverManager.getConnection(dbUrl)

    connection.createStatement().use { stmt ->
        stmt.executeUpdate(
            """
            CREATE TABLE IF NOT EXISTS buildings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT NOT NULL,
                building TEXT NOT NULL,
                flats INTEGER NOT NULL
            )
            """.trimIndent()
        )
    }

    val insertSQL = "INSERT INTO buildings(date, building, flats) VALUES(?, ?, ?)"
    val preparedStatement: PreparedStatement = connection.prepareStatement(insertSQL)

    for ((building, flats) in data) {
        preparedStatement.setString(1, date)
        preparedStatement.setString(2, building)
        preparedStatement.setInt(3, flats)
        preparedStatement.addBatch()
    }

    preparedStatement.executeBatch()
    println("\n–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    connection.close()
}

fun printStatsFromDatabase() {
    Class.forName("org.sqlite.JDBC")
    val dbUrl = "jdbc:sqlite:buildings.db"
    val connection = DriverManager.getConnection(dbUrl)

    println("\nüìÖ –í—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:")
    val allQuery = "SELECT date, building, flats FROM buildings ORDER BY date, building"
    connection.createStatement().use { stmt ->
        val rs = stmt.executeQuery(allQuery)
        while (rs.next()) {
            val date = rs.getString("date")
            val building = rs.getString("building")
            val flats = rs.getInt("flats")
            println("$date | –ö–æ—Ä–ø—É—Å $building: $flats –∫–≤–∞—Ä—Ç–∏—Ä")
        }
    }

    connection.close()
}

fun printStatsByDate(date: String) {
    Class.forName("org.sqlite.JDBC")
    val dbUrl = "jdbc:sqlite:buildings.db"
    val connection = DriverManager.getConnection(dbUrl)

    println("\nüìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ $date:")
    val query = "SELECT building, flats FROM buildings WHERE date = ? ORDER BY building"

    val stmt = connection.prepareStatement(query)
    stmt.setString(1, date)
    val rs = stmt.executeQuery()

    while (rs.next()) {
        val building = rs.getString("building")
        val flats = rs.getInt("flats")
        println("–ö–æ—Ä–ø—É—Å $building: $flats –∫–≤–∞—Ä—Ç–∏—Ä")
    }

    connection.close()
}
